이제 이 상태에서 저희가 바라는 모습으로 좀 더 발전시켜보시죠.

먼저 현재 코드 및 앞으로의 코드를 위해 지켜줘야할 것 부터 말씀드리겠습니다.
일반적으로 변수나 컴포넌트의 이름을 지을 땐, 알파벳으로만 진행한다.
컴포넌트의 이름을 지을 땐, Pascal Case를 따른다.
변수나 함수의 이름을 지을 땐, Camel Case를 따른다.
컴포넌트에 전달되는 props의 이름도 Camel Case를 따른다.
컴포넌트를 분리할 꺼라면 파일을 나누어 모듈로 관리하는 게 유지보수면에서 좋다.
현 코드에서 예시를 가져왔습니다.

[Worker, setWorker] = React.useState();
여기서 Worker를 worker로 변경해주시고, setWorker는 그대로 setWorker를 쓰시면 됩니다.
Camel Case: 이름을 서로 다른 단어들로 구성할 때 단어의 첫 글자는 대문자로 쓴다. 단, 맨 처음의 글자는 소문자를 유지한다.
setWorker, handleOnClick, onDelete, onEdit, onCreate 등을 예로 들 수 있습니다.

Button_Style -> StyledButton or Buttion
컴포넌트 이름에 _ 는 되도록이면 안쓰는 게 좋으며, 쓰게되는 경우는 변하지않는 상수를 표현할 때 주로 쓰입니다.
Pascal Case: Camel Case와 유사하지만, 맨 처음의 글자 또한 대문자로 유지하는 걸 말한다.
UserList, ListMaker, LeftPart 등이 있습니다.

추가록 LeftPart안에 전체를 감싸는 Container 가 있으며, 그안에 입력하는 영역, 목록을 보여주는 영역으로 나뉘어지니까 이 영역들로 컴포넌트를 쪼개며, 쪼개진 컴포넌트를 파일로 나누어 관리합니다.
이때 이름만 봐도 무얼하는 지 알 수 있도록 짓습니다. 

WorkerRegister
WorkerList
Worker

이런 식으로 지을 수도 있으며, 만약 변수명과 비슷해서 헷갈린다면 다른 단어를 찾아보는 걸 추천합니다.

여기까지 현 코드에 대한 리뷰였습니다.

--------------------------------------------------------------------------------------------------------------------------

이어서 다음 스텝으로 필요한 작업에 대해 안내해드리겠습니다.

혹시 추가한 근무자들을 달력에 어떻게 연결시킬까 생각해보셨나 궁금합니다.
좌측영역에선 실시간으로 근무자가 변경될 수 있으며, 이 변화에 맞춰서 캘린더가 알고리즘을 반영하며 근무표를 작성해줘야합니다.
이를 리액트의 특성과 같이 연결해서 설명드리면, 근무자들은 State가 됩니다.
State인 근무자들의 변화(추가, 삭제)가 있다면, 좌측 목록에서도 변화가 표현되며 근무표에도 반영되어야합니다.
근데 여기서, 근무자를 추가하는 컴포넌트와 근무표 컴포넌트는 서로 나누어져있습니다.
이때 근무자 state를 어떻게 근무표 컴포넌트로 넘길 수 있을까요?

부모를 통해서 props로 넘기는 방법도 있으며, React native API 인 Context를 이용할 수 있습니다.
이번엔 Context를 이용해서 여러 컴포넌트간 동일한 State를 공유하며 작업을 진행하길바랍니다.

* 관련되어 리액트 가이드 문서를 공유합니다.
https://beta.reactjs.org/learn/extracting-state-logic-into-a-reducer
https://beta.reactjs.org/learn/passing-data-deeply-with-context

그리고 현 어플리케이션에서 중심이 되는 Data에 대해서 한번 더 고민을 하길 바랍니다.
어플리케이션이 잘 동작하기위해 근본이 되는 Data들이 분명있을겁니다.
Data를 어떻게 추가하고, 수정하고 관리할 지 정리가 되어야합니다.
또한 Data 관리 방식은 화면(뷰)이 구성되는 방식과 독립적이여야합니다.

예를 들어, 아래와 같이 할 수 있습니다.

근무자
- uuid: 식별자(https://en.wikipedia.org/wiki/Universally_unique_identifier)
- 이름
- 계급

근무일
- uuid: 식별자(https://en.wikipedia.org/wiki/Universally_unique_identifier)
- 일: 1달의 몇일
- 요일: 일에 해당하는게 무슨 요일인지
- 휴일인가: 쉬는 날인지
- 근무자: 실제 근무자

위 예시와 같은 걸 모델이라 말하며, 이런 모델을 중심으로 상태를 만들어 관리하면 됩니다.
이때 관리할 때 Context를 이용해서 어플리케이션 전체로 공유하면
'내가 추가한 근무자를 근무일안의 근무자로 설정가능' 해집니다.

즉, 근무자를 다루는 Context, 근무일을 다루는 Context 를 나누면 될 듯합니다.

제가 설명을 잘 드리지 못할 거 같아, 나름 고민하며 진행해보았습니다.
사진 한장이지만, 좌측에서 추가된 유저를 우측에서 바로 반영해서 근무표를 작성합니다.
내부 코드는 위에서 말씀드린 부분에 대해 고민하며 작성했습니다.
이 코드는 필요하다면 다음 멘토링때 같이 살펴보면 좋을 듯 합니다.

image.png


State에서 Context까지 넘어가고, Model을 고민해서 Application을 작성하는 건 쉽지않은 단계이지만, 누구나 쉽게 생각하지 못하는 것이기도 합니다.
물론 저도 이런 부분에서 부족하지만, 이렇게 작업하는 게 본질적으로 잘 만들수 있는 방향이라 생각하여 이런 멘토링을 하게되었습니다.
그러니 난해한 설명이나 이해가 안되는 부분은 말씀해주시길 바라며, 맞닥뜨리는 어려움에 대해 걱정보다는 즐거움으로 임하시면 좋겠습니다.

그럼 남은 시간도 화이팅하세요!!
